name: K8s HTTP Tests Workflow

on:
  workflow_dispatch:
  
jobs:
  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 600
    steps:
    - name: CHECKOUT
      uses: actions/checkout@v2
    - name: AZURE LOGIN
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Create Cluster
      env:
        AZURE_APP_ID: ${{ secrets.AZURE_APP_ID }}
        AZURE_APP_PASSWORD: ${{ secrets.AZURE_APP_PASSWORD }}
        RESOURCE_GROUP: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
      run: |
        az aks create \
            --resource-group "${RESOURCE_GROUP}" \
            --name "k8s-clust" \
            --service-principal "${AZURE_APP_ID}"\
            --client-secret "${AZURE_APP_PASSWORD}" \
            --node-vm-size "Standard_F16s" \
            --node-count 1 \
            --location "eastus" \
            --generate-ssh-keys
    - name: Configure AKS
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: 'k8s-clust'
        resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
    - name: Deploy Niginx
      run: |
        # Create a namespace for your ingress resources
        kubectl create namespace ingress-basic

        # Add the ingress-nginx repository
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

        # Use Helm to deploy an NGINX ingress controller
        helm install nginx-ingress ingress-nginx/ingress-nginx \
            --namespace ingress-basic \
            --set controller.replicaCount=2 \
            --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
            --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux
        # Wait for ingress ip
        kubectl get service nginx-ingress-ingress-nginx-controller --namespace ingress-basic -w  \
        -o 'go-template={{with .status.loadBalancer.ingress}}{{range .}}{{.ip}}{{"\n"}}{{end}}{{.err}}{{end}}' 2>/dev/null \
        | head -n1
  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        payload: [50, 1024]
        users: [60, 200]
    env:
      TEST_NAME: "h1_h1_passthrough"
      TEST_ROOT: "load-tests"
    steps:
    - uses: actions/checkout@v2
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    - name: Write Test Name to outputs
      id: testname
      run: |
        echo "::set-output name=test-name::${TEST_NAME}"
    - name: Ballerina Build from Nightly Pack
      if: ${{ github.event.client_payload.zipURL == '' }}
      uses: ballerina-platform/ballerina-action@nightly
      env:
        CI_BUILD: true
        WORKING_DIR: load-tests/${{ steps.testname.outputs.test-name }}/src
      with:
        args:
          build
    - name: Ballerina Build from Distribution ZIP
      if: ${{ github.event.client_payload.zipURL != '' }}
      run: |
        wget -c ${{ github.event.client_payload.zipURL }}
        filename=$(basename -- "${{ github.event.client_payload.zipURL }}")
        filename="${filename%.*}"
        echo "Distribution: ${filename}"
        unzip -q ${filename}.zip
        export CI_BUILD=true
        export BAL_PATH=`pwd`/${filename}
        echo "var ${BAL_PATH}"
        pushd load-tests/${TEST_NAME}/src
        ls -ltr
        $BAL_PATH/bin/bal build
    - name: Docker push
      run: docker push ballerina/${TEST_NAME}:latest
    - name: Copy artifacts
      run: |
        ls -ltr
        cp -a ${TEST_ROOT}/${TEST_NAME}/src/target/kubernetes/${TEST_NAME}/. ${TEST_ROOT}/${TEST_NAME}/deployment/
    - name: 'Install Kustomize'
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - name: 'Run Kustomize'
      run: |
        kustomize build ${TEST_ROOT}/${TEST_NAME}/deployment > ${TEST_ROOT}/${TEST_NAME}/final.yaml
    - name: Configure AKS
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: 'k8s-clust'
        resource-group: ${{ secrets.CLUSTER_RESOURCE_GROUP }}
    - name: Deploy artifacts
      run: |
        kubectl apply -f ${TEST_ROOT}/${TEST_NAME}/final.yaml
    - name: Login via Az module
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Write values to outputs
      id: write
      run: |
        echo "::set-output name=cluster-ip::$(kubectl get service nginx-ingress-ingress-nginx-controller --namespace ingress-basic -w  \
                                              -o 'go-template={{with .status.loadBalancer.ingress}}{{range .}}{{.ip}}{{"\n"}}{{end}}{{.err}}{{end}}' 2>/dev/null \
                                              | head -n1)"
        echo "::set-output name=scenario-name::${TEST_NAME}"
        echo "::set-output name=vm-name::bal-perf-vm-`echo ${TEST_NAME} | tr '_' '-'`-${{ matrix.users }}-${{ matrix.payload }}-${{ GITHUB.RUN_NUMBER }}"
        echo "::set-output name=git-token::${{ secrets.BALLERINA_BOT_TOKEN }}"
        echo "::set-output name=space-id::${{ secrets.SPACE_ID }}"
        echo "::set-output name=message-key::${{ secrets.MESSAGE_KEY }}"
        echo "::set-output name=chat-token::${{ secrets.CHAT_TOKEN }}"
        echo "::set-output name=custom-image-name::$(cat image.txt)"
        echo "::set-output name=ppg-id::/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/ballerina-performance/providers/Microsoft.Compute/proximityPlacementGroups/${{ secrets.PPG_NAME }}"
    - name: Print outputs
      run: |
        sed -i -e 's/<<CLUSTER_IP>>/${{ steps.write.outputs.cluster-ip }}/g' base-image/k8s.yaml
        sed -i -e 's/<<REPO_NAME>>/ballerina-performance-cloud/g' base-image/k8s.yaml
        sed -i -e 's/<<SCENARIO_NAME>>/${{ steps.write.outputs.scenario-name }}/g' base-image/k8s.yaml
        sed -i -e 's/<<GITHUB_TOKEN>>/${{steps.write.outputs.git-token}}/g' base-image/k8s.yaml
        sed -i -e 's/<<PAYLOAD_SIZE>>/${{ matrix.payload }}/g' base-image/k8s.yaml
        sed -i -e 's/<<SPACE_ID>>/${{steps.write.outputs.space-id}}/g' base-image/k8s.yaml
        sed -i -e 's/<<MESSAGE_KEY>>/${{steps.write.outputs.message-key}}/g' base-image/k8s.yaml
        sed -i -e 's/<<CHAT_TOKEN>>/${{steps.write.outputs.chat-token}}/g' base-image/k8s.yaml
        sed -i -e 's/<<DISPATCH_TYPE>>//g' base-image/k8s.yaml
        sed -i -e 's/<<BRANCH_NAME>>//g' base-image/k8s.yaml
        sed -i -e 's/<<CONCURRENT_USERS>>/${{ matrix.users }}/g' base-image/k8s.yaml

        kubectl apply -f base-image/k8s.yaml
        while [[ $(kubectl get pods -l app=jmeter -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for pod" && sleep 1; done
        kubectl logs -f -l app="jmeter"
    - name: Pod logs
      if: always()
      run: |
        kubectl logs -l logs=true
    - name: Undeploy Kubernetes artifacts
      if: always()
      run: |
        kubectl delete -f ${TEST_ROOT}/${TEST_NAME}/final.yaml
        kubectl delete -f base-image/k8s.yaml
  cleanup:
    needs: build
    name: clean up
    if: always()
    runs-on: ubuntu-latest
    steps:
    - name: AZURE LOGIN
      uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
    - name: Cleaning up the cluster
      if: always()
      uses: azure/CLI@v1
      with:
        azcliversion: "agentazcliversion"
        inlineScript: |
          az group delete --name mc_${{ secrets.CLUSTER_RESOURCE_GROUP }}_k8s-clust_eastus -y
          az aks delete --name k8s-clust --resource-group ${{ secrets.CLUSTER_RESOURCE_GROUP }} -y